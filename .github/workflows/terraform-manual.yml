# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Terraform Manual

permissions:
  id-token: write
  contents: read
  checks: write
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT }}
  ARM_USE_OIDC: true
  TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  tf_actions_working_dir: "terraform"
  terraform_version: 1.5.2

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'plan'
        options:
          - 'plan'
          - 'apply'
          - 'destroy'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        # TODO - be able to set to ALL
        default: 'npe'
        options:
          - 'npe'
          - 'prod'
jobs:
  plan:
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.terraform_version }}

#    - name: 'Az CLI login'
#      uses: azure/login@v1
#      with:
#        client-id: ${{ secrets.AZURE_CLIENT_ID }}
#        tenant-id: ${{ secrets.ARM_TENANT_ID }}
#        subscription-id: f7ce4a37-e77e-4c69-8138-c668bdf0c994

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Workspace
      id: workspace
      run: terraform workspace select -or-create ${{ github.event.inputs.environment }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -lock=false -out=.terraform/tfplan-${{github.event.inputs.environment}}-${{github.sha}} -input=false

    - name: Adding markdown
      run: echo '#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`' >> $GITHUB_STEP_SUMMARY

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
          
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: 'Upload terraform cache'
      uses: actions/upload-artifact@v3
      if: ${{github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'}}
      with:
        name: terraform-cache-${{github.sha}}
        path: terraform/.terraform
        retention-days: 2

    - name: 'Upload lockfile'
      uses: actions/upload-artifact@v3
      if: ${{github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'}}
      with:
        name: terraform-lock-${{github.sha}}
        path: terraform/.terraform.lock.hcl
        retention-days: 2

  apply:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: plan
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.terraform_version}}

      - name: Get terraform cache
        uses: actions/download-artifact@v3
        with:
          name: terraform-cache-${{github.sha}}
          path: terraform/.terraform

      - name: Get terraform lockfile
        uses: actions/download-artifact@v3
        with:
          name: terraform-lock-${{github.sha}}
          path: terraform/

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select -or-create ${{ github.event.inputs.environment }}



      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: f7ce4a37-e77e-4c69-8138-c668bdf0c994

      - name: chmod
        run: |
          chmod -R 777 .terraform/

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        run: terraform apply -no-color -input=false -auto-approve .terraform/tfplan-${{github.event.inputs.environment}}-${{github.sha}}

